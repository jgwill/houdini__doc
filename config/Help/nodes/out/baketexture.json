{"body": [{"indent": 0, "text": ["Bake Texture"], "type": "title", "extent": [0, 17], "level": 0}, {"indent": 0, "type": "summary", "extent": [86, 164], "text": ["Generates a texture map from one or more objects' rendered appearance."]}, {"body": [{"indent": 0, "type": "para", "extent": [179, 261], "text": ["It can be useful to generate a texture from the rendered appearance of a model."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [630, 847], "text": ["This is especially useful when you ", {"fragment": "#xfer", "text": ["bake a texture from a high-resolution model and apply it to a low-resolution model"], "value": "#xfer", "fullpath": "/nodes/out/baketexture#xfer", "scheme": null, "type": "link"}, ", possibly in combination with other resolution \"tricks\" such as subdivision surfaces."]}], "indent": 0, "text": ["As a performance \"cheat\", you can bake the fully rendered appearance of a model into a texture, and then use the texture instead of running the actual shaders. When you can get away with it (where it\u2019s not noticeable that the object\u2019s appearance doesn\u2019t change), this can give a large speedup, especially for large numbers of identical objects with complex shaders."], "extent": [261, 630], "blevel": 2, "type": "bullet"}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [847, 955], "text": ["You can capture the rendered appearance of a model as the starting point for a hand-painted texture map."]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [955, 1017], "text": ["This node renders one or more objects as flat texture maps."]}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [164, 179], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [1037, 1175], "text": ["This node can generate UDIM unwrapped texture images, or ", {"text": ["Ptex"], "fullpath": "/shade/ptex", "scheme": null, "type": "link", "value": "/shade/ptex"}, " texture maps, using the ", {"text": ["UV unwrapping method"], "type": "ui"}, " parameter."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [1276, 1369], "text": ["The node will replace the string ", {"text": ["%(UDIM)d"], "type": "code"}, " in the output filename with the UDIM index."]}], "indent": 0, "text": ["For UDIM textures, the node will use the ", {"text": ["uv"], "type": "code"}, " attribute on the model to lay out the baked output."], "extent": [1175, 1276], "blevel": 2, "type": "bullet"}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1369, 1794], "text": [{"text": ["Ptex"], "fullpath": "/shade/ptex", "scheme": null, "type": "link", "value": "/shade/ptex"}, " generates a separate texture for each face and saves all the textures and the model topology together in a single archive. Since Ptex texture tiles must map to quadrilaterals, Mantra assumes the geometry will render as a subdivision surface. This node creates Ptex tiles for each polygon using the subdivision rules (3 faces for a triangle, 1 for a quad, 5 for a pentagon, 6 for a hexagon, and so on)."]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 2, "text": ["UDIM and Ptex"], "extent": [1017, 1037], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [1850, 2148], "text": ["When you specify the objects to render in the ", {"text": ["UV render objects"], "type": "ui"}, ", you can optionally render the appearance of one object into the UV space of another object. This is useful for baking the look of high-res geometry and complex shaders, and then applying them to a much lower-resolution object."]}, {"indent": 0, "type": "para", "extent": [2148, 2575], "text": ["By default, baking will use the surface normal of the lower-resolution object for projection. This may be undesired in areas where there are normal discontinuities. For such cases, you may optionally specify ", {"text": ["UV cage object"], "type": "ui"}, " which is a dupicate of of ", {"text": ["UV object"], "type": "ui"}, " whose vertices are manually pushed out slightly. The ", {"text": ["UV cage object"], "type": "ui"}, " will then be used to map points toward ", {"text": ["UV object"], "type": "ui"}, " as the new projection direction."]}], "indent": 0, "level": 2, "text": ["Baking high-res object onto low-res object"], "extent": [1794, 1850], "container": true, "type": "h", "id": "xfer"}, {"body": [{"indent": 0, "type": "para", "extent": [2605, 2802], "text": ["You can use the ", {"text": ["UV render objects"], "type": "ui"}, " parameter to specify multiple objects to render. You can also use wildcards in the ", {"text": ["UV render objects"], "type": "ui"}, " sub-parameters to match multiple objects in one go."]}, {"indent": 0, "type": "para", "extent": [2802, 3008], "text": ["When you have one pattern in the ", {"text": ["UV object"], "type": "ui"}, " path, and a corresponding ", {"text": ["*"], "type": "code"}, " wildcard in the ", {"text": ["Output picture"], "type": "ui"}, " filename, the node will replace the ", {"text": ["*"], "type": "code"}, " in the filename with the match from the object path."]}, {"indent": 0, "type": "para", "extent": [3008, 3244], "text": ["For example, if the ", {"text": ["UV object"], "type": "ui"}, " path is ", {"text": ["/obj/*"], "type": "code"}, ", and the ", {"text": ["Output picture"], "type": "ui"}, " filename is ", {"text": ["$HIP/textures/*.rat"], "type": "code"}, ", then the node will render ", {"text": ["/obj/apple"], "type": "code"}, " as ", {"text": ["$HIP/textures/apple.rat"], "type": "code"}, ", ", {"text": ["/obj/bear"], "type": "code"}, " as ", {"text": ["$HIP/textures/bear.rat"], "type": "code"}, ", and so on."]}, {"indent": 0, "type": "para", "extent": [3244, 3504], "text": ["Note that the pattern in the ", {"text": ["UV object"], "type": "ui"}, " path can be something other than a ", {"text": ["*"], "type": "code"}, ". For example, if you have the objects ", {"text": ["/obj/ball1"], "type": "code"}, ", ", {"text": ["/obj/ball2"], "type": "code"}, ", and ", {"text": ["/obj/ball3"], "type": "code"}, ", you could use a path of ", {"text": ["/obj/ball[1-3]"], "type": "code"}, " and an output filename like ", {"text": ["$HIP/textures/*.rat"], "type": "code"}, "."]}], "indent": 0, "level": 2, "text": ["Object pattern matching"], "extent": [2575, 2605], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [3525, 3682], "text": ["As with a regular render, you can output multiple image planes as textures. For example shading position, direct lighting, indirect lighting, and so on."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [3682, 3829], "text": ["Mantra unwraps the model using a lens shader (see ", {"text": ["$HH/CVex/uvlens.vfl"], "type": "code"}, "). Mantra only supports lens shaders in ray-tracing and PBR ray-tracing."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [3829, 4178], "text": ["The lens shader raises the \"camera\" very slightly above the surface, to account for precision errors in calculating the surface position. This means it\u2019s very important to have correct surface normals on the model. If the model\u2019s normals are reversed for some reason, you can un-reverse them on this node using the ", {"text": ["Reverse normals"], "type": "ui"}, " parameter."]}, {"indent": 0, "blevel": 3, "type": "bullet", "extent": [4178, 4339], "text": ["The ", {"text": "", "value": "/vex/functions/uvunwrap", "fallback_text": "uvunwrap()", "fullpath": "/vex/functions/uvunwrap", "scheme": "Vex", "type": "link"}, " function the lens shader uses correctly accounts for subdivided surfaces and displacement shaders when calculating the surface positions."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [4339, 4566], "text": ["When ", {"text": ["Extract Format"], "type": "ui"}, " does not support floating point data (such as ", {"text": ["TGA"], "type": "code"}, ", ", {"text": ["PNG"], "type": "code"}, " or ", {"text": ["JPG"], "type": "code"}, "), the output values of ", {"text": ["Tangent-Space Normal (Nt)"], "type": "code"}, " and ", {"text": ["Shading Normal (N)"], "type": "code"}, " planes will be automatically remapped from -1~1 to 0~1."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [4566, 4677], "text": ["Writing out UDIM tiles for ", {"text": ["Extra Image Planes"], "type": "ui"}, " with ", {"text": ["Different File"], "type": "ui"}, " option is currently unsupported."]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 2, "text": ["Tips and notes"], "extent": [3504, 3525], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [4689, 4920], "text": ["This is a version of the regular ", {"text": ["Mantra render node"], "fullpath": "/nodes/out/ifd", "scheme": "Node", "type": "link", "value": "/nodes/out/ifd"}, " which is configured with parameters to allow for easy baking of texture maps for objects. See the ", {"text": ["help for the render node"], "fullpath": "/nodes/out/ifd", "scheme": "Node", "type": "link", "value": "/nodes/out/ifd"}, " for more general help."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [4936, 5021], "text": ["Choose \"UDIM\" to generate regular UV images, or \"Ptex\" to generate Ptex images."]}], "indent": 0, "text": ["Texture Format"], "role": "item", "extent": [4920, 4936], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5033, 5111], "text": ["The size of the output texture image. This is ignored for Ptex textures."]}], "indent": 0, "text": ["Resolution"], "role": "item", "extent": [5021, 5033], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5135, 5240], "text": ["For Ptex, the texture size to use for the smallest faces in each object, from ", {"text": ["4"], "type": "code"}, " to ", {"text": ["1024"], "type": "code"}, " pixels."]}], "indent": 0, "text": ["Minimum Map Resolution"], "role": "item", "extent": [5111, 5135], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5264, 5476], "text": ["For Ptex, the maximum possible texture size to use, from ", {"text": ["4"], "type": "code"}, " to ", {"text": ["1024"], "type": "code"}, " pixels. This is a clamp on the per-face value calculated by multiplying the ", {"text": ["Minimum map resolution"], "type": "ui"}, " by the ", {"text": ["Map resolution scale"], "type": "ui"}, "."]}], "indent": 0, "text": ["Maximum Map Resolution"], "role": "item", "extent": [5240, 5264], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5498, 5864], "text": ["For Ptex, this node calculates the size of each texture by scaling the ", {"text": ["Minimum map resolution"], "type": "ui"}, " based on the relative size of each face. The smallest faces will get the ", {"text": ["Minimum map resolution"], "type": "ui"}, ". With a scale of ", {"text": ["1.0"], "type": "code"}, ", faces 2\u00d7 larger than the smallest will get 2\u00d7 larger textures. If you set the scale to ", {"text": ["0.0"], "type": "code"}, ", ", {"text": ["all"], "type": "em"}, " faces will get the minimum resolution."]}], "indent": 0, "text": ["Map Resolution Scale"], "role": "item", "extent": [5476, 5498], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5883, 6146], "text": ["For each object you want to render, click the ", {"text": "", "fullpath": "/nodes/out/BUTTONS/add", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/add"}, " Add button and enter the path of the object in ", {"text": ["UV Object"], "type": "ui"}, ", and the texture filename in ", {"text": ["Output picture"], "type": "ui"}, ". You can do ", {"fragment": "#patterns", "text": ["simple pattern expansion"], "value": "#patterns", "fullpath": "/nodes/out/baketexture#patterns", "scheme": null, "type": "link"}, " in the path and filename."]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [6146, 6313], "text": ["To take the rendered appearance of a high resolution object and bake it into the texture space of the ", {"text": ["UV object"], "type": "ui"}, ", enter the path of the ", {"text": ["High res object"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6313, 6422], "text": ["To bake using the projection direction from a cage object, enter the path of ", {"text": ["UV cage object"], "type": "ui"}, ". "]}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [6422, 6485], "text": ["The output picture field accepts a few special codes:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [6485, 6657], "text": ["When ", {"text": ["Texture unwrapping method"], "type": "ui"}, " is \"UDIM\", you can use ", {"text": ["%(UDIM)d"], "type": "code"}, " in the filename, and the node will replace it with the UDIM index to render out multiple files."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6657, 6764], "text": ["If you enter ", {"text": ["%(CHANNEL)s"], "type": "code"}, " as part of the filename, the node will replace it with the channel name."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [6774, 7087], "text": [{"text": ["Output picture"], "type": "ui"}, " must be a floating point image format that supports multi-channel images for ", {"text": ["UDIM Post Process"], "type": "ui"}, " and ", {"text": ["Extract image planes"], "type": "ui"}, " to work correctly. It is strongly recommended to leave it in .rat format, and use ", {"text": ["Extract image planes"], "type": "ui"}, " to extract the channels into a different format."]}], "indent": 4, "role": "item", "type": "note", "extent": [6764, 6774]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["UV Render Objects"], "role": "item", "extent": [5864, 5883], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"indent": 0, "type": "para", "extent": [7114, 7211], "text": ["You can use the controls on the ", {"text": ["Output"], "type": "ui"}, " tab to rename the channels in the output filenames."]}, {"body": [{"body": [{"type": "para", "indent": 4, "extent": [23820, 23953], "text": ["When baking, instead of writing shading position ", {"text": ["P"], "type": "code"}, " raw, it will be normalized to 0~1 based on bounding cube of the UV Object."]}], "indent": 0, "text": ["Fit P To Object Bounding Box"], "role": "item", "attrs": {"ifdprop": "renderer:bake_normalizep", "hprop": "vm_bake_normalizep"}, "extent": [23717, 23750], "type": "parameters_item", "id": "vm_bake_normalizep"}, {"body": [{"indent": 4, "type": "para", "extent": [24054, 24265], "text": ["When enabled, image planes contained in the output image will be extracted to separate files. The files will be saved alongside the output image, in the format: ", {"text": ["$<basename>>.", {"text": ["plane_name"], "type": "var"}, ".", {"text": ["extension"], "type": "var"}], "type": "code"}, "."]}], "indent": 0, "text": ["Extract image planes"], "role": "item", "attrs": {"ifdprop": "renderer:extractimageplanes", "hprop": "vm_extractimageplanes"}, "extent": [23953, 23977], "type": "parameters_item", "id": "vm_extractimageplanes"}, {"body": [{"indent": 4, "type": "para", "extent": [24593, 24718], "text": ["When enabled, intermediate output file (vm_uvoutputpicture) will be deleted after the image planes have been extracted."]}], "indent": 0, "text": ["Remove Intermediate Output"], "role": "item", "attrs": {"ifdprop": "renderer:extractremoveintermediate", "hprop": "vm_extractremoveintermediate"}, "extent": [24472, 24502], "type": "parameters_item", "id": "vm_extractremoveintermediate"}, {"body": [], "indent": 0, "text": ["Shading tangent-space normal (Nt)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_Nt"}, "extent": [26721, 26758], "type": "parameters_item", "id": "vm_quickplane_Nt"}, {"body": [{"indent": 4, "type": "para", "extent": [206204, 206299], "text": ["Used when baking textures. Stores the magnitude between the high-res and low-res objects."]}], "indent": 0, "text": ["Displacement (Ds)"], "role": "item", "attrs": {"hprop": "vm_quickplane_Ds"}, "extent": [206153, 206174], "type": "parameters_item", "id": "vm_quickplane_Ds"}, {"body": [{"indent": 4, "type": "para", "extent": [206357, 206449], "text": ["Used when baking textures. Stores the deltas between the high-res and low-res objects."]}], "indent": 0, "text": ["Vector Displacement (Vd)"], "role": "item", "attrs": {"hprop": "vm_quickplane_Vd"}, "extent": [206299, 206327], "type": "parameters_item", "id": "vm_quickplane_Vd"}, {"body": [{"indent": 4, "type": "para", "extent": [206523, 206653], "text": ["Used when baking textures. Stores the deltas between the high-res and low-res objects in the low-res object\u2019s tangent-space."]}], "indent": 0, "text": ["Tangent-Space Vector Displacement (Vdt)"], "role": "item", "attrs": {"hprop": "vm_quickplane_Vdt"}, "extent": [206449, 206492], "type": "parameters_item", "id": "vm_quickplane_Vdt"}, {"body": [{"indent": 4, "type": "para", "extent": [206701, 206772], "text": ["Used when baking textures. The occlusion at the shading position."]}], "indent": 0, "text": ["Occlusion (Oc)"], "role": "item", "attrs": {"hprop": "vm_quickplane_Oc"}, "extent": [206653, 206671], "type": "parameters_item", "id": "vm_quickplane_Oc"}, {"body": [{"indent": 4, "type": "para", "extent": [206817, 206947], "text": ["Used when baking textures. The occlusion along the inverted normal at the shading position.  This produces \"relief\" shading."]}], "indent": 0, "text": ["Cavity (Cv)"], "role": "item", "attrs": {"hprop": "vm_quickplane_Cv"}, "extent": [206772, 206787], "type": "parameters_item", "id": "vm_quickplane_Cv"}, {"body": [{"indent": 4, "type": "para", "extent": [206995, 207066], "text": ["Used when baking textures. The thickness at the shading position."]}], "indent": 0, "text": ["Thickness (Th)"], "role": "item", "attrs": {"hprop": "vm_quickplane_Th"}, "extent": [206947, 206965], "type": "parameters_item", "id": "vm_quickplane_Th"}, {"body": [{"indent": 4, "type": "para", "extent": [207114, 207185], "text": ["Used when baking textures. The curvature at the shading position."]}], "indent": 0, "text": ["Curvature (Cu)"], "role": "item", "attrs": {"hprop": "vm_quickplane_Cu"}, "extent": [207066, 207084], "type": "parameters_item", "id": "vm_quickplane_Cu"}, {"body": [], "indent": 0, "text": ["Shading position (P)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_P"}, "extent": [26517, 26541], "type": "parameters_item", "id": "vm_quickplane_P"}, {"body": [], "indent": 0, "text": ["Shading normal (N)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_N"}, "extent": [26654, 26676], "type": "parameters_item", "id": "vm_quickplane_N"}, {"body": [], "indent": 0, "text": ["Surface Unlit Base Color (basecolor)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_basecolor"}, "extent": [27487, 27527], "type": "parameters_item", "id": "vm_quickplane_basecolor"}, {"body": [], "indent": 0, "text": ["Surface Unlit Diffuse Color (diffcolor)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_diffcolor"}, "extent": [27580, 27623], "type": "parameters_item", "id": "vm_quickplane_diffcolor"}, {"body": [], "indent": 0, "text": ["Surface Unlit Specular Color (speccolor)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_speccolor"}, "extent": [27676, 27720], "type": "parameters_item", "id": "vm_quickplane_speccolor"}, {"body": [], "indent": 0, "text": ["Surface Emission Color (emitcolor)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_emitcolor"}, "extent": [27773, 27811], "type": "parameters_item", "id": "vm_quickplane_emitcolor"}, {"body": [], "indent": 0, "text": ["Surface SSS color (ssscolor)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_ssscolor"}, "extent": [27864, 27896], "type": "parameters_item", "id": "vm_quickplane_ssscolor"}, {"body": [], "indent": 0, "text": ["Surface Metallic (metallic)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_metallic"}, "extent": [27948, 27979], "type": "parameters_item", "id": "vm_quickplane_metallic"}, {"body": [], "indent": 0, "text": ["Surface Roughness (specrough)"], "role": "item", "attrs": {"status": "nd", "hprop": "vm_quickplane_specrough"}, "extent": [28031, 28064], "type": "parameters_item", "id": "vm_quickplane_specrough"}, {"body": [{"indent": 4, "type": "para", "extent": [210874, 211012], "text": ["These controls let you output VEX variables as auxiliary image planes, either as extra planes in the output file or extra files."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [211021, 211214], "text": ["As of Houdini 9.1, each channel can now be written out to a different file. This lets you work with OpenEXR programs that don\u2019t support multiple channels in a single ", {"text": [".exr"], "type": "code"}, " image."]}, {"indent": 8, "type": "para", "extent": [211214, 211476], "text": ["You can also do fancy stuff like send one channel to the ", {"text": ["md"], "type": "code"}, " device (a non-interactive MPlay window), or split your image into multiple ", {"text": [".pic"], "type": "code"}, " files with a handful of ", {"text": [".tif"], "type": "code"}, " files thrown in. But if the primary image is ", {"text": ["ip"], "type": "code"}, ", all planes go to ", {"text": ["ip"], "type": "code"}, "."]}], "indent": 4, "role": "item", "extent": [211012, 211021], "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}, {"indent": 4, "type": "para", "extent": [211476, 211845], "text": ["The Channel Name parameter lets you give the channel in the output file a different name than the default (the name of the VEX variable). For example, you want to send out the Of variable. If the Channel Name is left blank, the plane name in the ", {"text": [".pic"], "type": "code"}, " file will be ", {"text": ["Of"], "type": "code"}, ". If you set Channel Name to ", {"text": ["Opacity"], "type": "code"}, ", the plane in the ", {"text": [".pic"], "type": "code"}, " file will be called ", {"text": ["Opacity"], "type": "code"}, "."]}], "indent": 0, "text": ["Extra image planes"], "role": "item", "attrs": {"hprop": "vm_numaux"}, "extent": [210825, 210847], "type": "parameters_item", "id": "vm_numaux"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Main"], "extent": [7100, 7114], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [7983, 8202], "text": ["The controls on this tab let you optionally remap channel names to new strings in the output filenames. Turning on export of a channel on the ", {"text": ["Main"], "type": "ui"}, " sub-tab enables the corresponding renaming field on this sub-tab."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [25550, 25783], "text": ["When extracting images for baking, this is the separator string that\u2019s inserted between the filename and the channel name.  For with a separator of ", {"text": ["."], "type": "code"}, ", the extracted image might be ", {"text": ["texture.Nt.png"], "type": "code"}, " instead of ", {"text": ["texture_Nt.png"], "type": "code"}, "."]}], "indent": 0, "text": ["Name Separator"], "role": "item", "attrs": {"ifdprop": "renderer:extractseparator", "hprop": "vm_extractseparator"}, "extent": [25459, 25477], "type": "parameters_item", "id": "vm_extractseparator"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Output"], "extent": [7968, 7983], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Images"], "extent": [7087, 7100], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [207420, 207502], "text": ["Disables all lighting on primary image plane in order to make baking faster."]}], "indent": 0, "text": ["Disable Lighting/Emission"], "role": "item", "attrs": {"hprop": "vm_bake_skipcf"}, "extent": [207363, 207393], "type": "parameters_item", "id": "vm_bake_skipcf"}, {"body": [{"indent": 4, "type": "para", "extent": [207573, 207706], "text": ["Add baking related shader exports to layers structs, so they can be mixed by layer compositing operations and finally exported."]}], "indent": 0, "text": ["Add Baking Exports to Shader Layers"], "role": "item", "attrs": {"hprop": "vm_bake_layerexport"}, "extent": [207502, 207541], "type": "parameters_item", "id": "vm_bake_layerexport"}, {"body": [{"indent": 4, "type": "para", "extent": [207752, 207907], "text": ["Number of samples to use for raytraced shading (eg. Occlusion, Cavity, Thickness). Increasing the number of samples will reduce noise in the shading."]}], "indent": 0, "text": ["Baking samples"], "role": "item", "attrs": {"hprop": "vm_bake_samples"}, "extent": [207706, 207724], "type": "parameters_item", "id": "vm_bake_samples"}, {"body": [{"indent": 4, "type": "para", "extent": [208005, 208315], "text": ["Use Mikkelsen\u2019s Tangent Space for baking tangent space normals (", {"text": ["Nt"], "type": "code"}, "). The basis is computed per-fragment (Unreal Engine compatible). Use a ", {"text": ["Divide SOP"], "fullpath": "/nodes/sop/divide", "scheme": "Node", "type": "link", "value": "/nodes/sop/divide"}, " to convert the UV Object into triangle mesh before baking because other applications may interpolate tangents across quads differently."]}], "indent": 0, "text": ["Use MikkT Tangent Space"], "role": "item", "attrs": {"ifdprop": "renderer:bake_usemikkt", "hprop": "vm_bake_usemikkt"}, "extent": [207907, 207934], "type": "parameters_item", "id": "vm_bake_usemikkt"}, {"body": [{"indent": 4, "type": "para", "extent": [208437, 208579], "text": ["When enabled, backfacing normals in tangent space (i.e. its Z axis in tangent basis is negative) will be flipped to always face forward."]}], "indent": 0, "text": ["Tangent Normal Face Forward"], "role": "item", "attrs": {"ifdprop": "renderer:bake_normalsfaceforward", "hprop": "vm_bake_normalsfaceforward"}, "extent": [208315, 208346], "type": "parameters_item", "id": "vm_bake_normalsfaceforward"}, {"body": [{"indent": 4, "type": "para", "extent": [208643, 208811], "text": ["Toggles flipping of the normal\u2019s X axis. Various packages may expect normal maps in different spaces. The flip parameters allow you to match these various spaces."]}], "indent": 0, "text": ["Tangent Normal Flip X"], "role": "item", "attrs": {"hprop": "vm_bake_tangentnormalflipx"}, "extent": [208579, 208604], "type": "parameters_item", "id": "vm_bake_tangentnormalflipx"}, {"body": [{"indent": 4, "type": "para", "extent": [208875, 209043], "text": ["Toggles flipping of the normal\u2019s Y axis. Various packages may expect normal maps in different spaces. The flip parameters allow you to match these various spaces."]}], "indent": 0, "text": ["Tangent Normal Flip Y"], "role": "item", "attrs": {"hprop": "vm_bake_tangentnormalflipy"}, "extent": [208811, 208836], "type": "parameters_item", "id": "vm_bake_tangentnormalflipy"}, {"body": [], "indent": 0, "text": ["Include Displacement in Tangent Normal"], "role": "item", "attrs": {"hprop": "vm_bake_tangentnormalincludedisp"}, "extent": [209043, 209085], "type": "parameters_item", "id": "vm_bake_tangentnormalincludedisp"}, {"body": [{"indent": 4, "type": "para", "extent": [209193, 209335], "text": ["This acts as a contrast control over the occlusion shading, with values higher and lower than ", {"text": ["0.5"], "type": "code"}, " resulting in more and less contrast."]}], "indent": 0, "text": ["Occlusion Bias"], "role": "item", "attrs": {"hprop": "vm_bake_occlusionbias"}, "extent": [209141, 209159], "type": "parameters_item", "id": "vm_bake_occlusionbias"}, {"body": [{"indent": 4, "type": "para", "extent": [209389, 209466], "text": ["Controls the distance within which features will influence the shading."]}], "indent": 0, "text": ["Cavity Distance"], "role": "item", "attrs": {"hprop": "vm_bake_cavitydistance"}, "extent": [209335, 209354], "type": "parameters_item", "id": "vm_bake_cavitydistance"}, {"body": [{"indent": 4, "type": "para", "extent": [209512, 209661], "text": ["This acts as a contrast control over the cavity occlusion shading, with values higher and lower than ", {"text": ["0.5"], "type": "code"}, " resulting in more and less contrast."]}], "indent": 0, "text": ["Cavity Bias"], "role": "item", "attrs": {"hprop": "vm_bake_cavitybias"}, "extent": [209466, 209481], "type": "parameters_item", "id": "vm_bake_cavitybias"}, {"body": [{"indent": 4, "type": "para", "extent": [209728, 210014], "text": ["This is a course but fast approximation for measuring curvature. When off (the default), the renderer measures curvature using local topology. Turning this on measures curvature by casting occlusion rays. The number of occlusion rays is controlled by ", {"text": ["Baking Samples"], "type": "ui"}, " parameter."]}], "indent": 0, "text": ["Occlusion-based Curvature"], "role": "item", "attrs": {"hprop": "vm_bake_curvatureocc"}, "extent": [209661, 209690], "type": "parameters_item", "id": "vm_bake_curvatureocc"}, {"body": [{"indent": 4, "type": "para", "extent": [210080, 210165], "text": ["Maximum occlusion ray distance to use when ", {"text": ["Occlusion-based Curvature"], "type": "ui"}, " is on."]}], "indent": 0, "text": ["Curvature Ray Distance"], "role": "item", "attrs": {"hprop": "vm_bake_curvaturesdist"}, "extent": [210014, 210040], "type": "parameters_item", "id": "vm_bake_curvaturesdist"}, {"body": [{"indent": 4, "type": "para", "extent": [210224, 210370], "text": ["Multiplies the output curvature value. If you are seeing any curvature shading you should increase this value until the gradient is visible."]}], "indent": 0, "text": ["Curvature Scale"], "role": "item", "attrs": {"hprop": "vm_bake_curvaturescale"}, "extent": [210165, 210184], "type": "parameters_item", "id": "vm_bake_curvaturescale"}, {"body": [{"indent": 4, "type": "para", "extent": [210427, 210575], "text": ["This acts as a contrast control over the curvature\u2019s shading, with values higher and lower than ", {"text": ["0.5"], "type": "code"}, " resulting in more and less contrast."]}], "indent": 0, "text": ["Curvature Bias"], "role": "item", "attrs": {"hprop": "vm_bake_curvaturebias"}, "extent": [210370, 210388], "type": "parameters_item", "id": "vm_bake_curvaturebias"}, {"body": [{"indent": 4, "type": "para", "extent": [210669, 210825], "text": ["Used to specify UDIM tiles to bake. Example: \"1001-1004,1011\" (without quotes). If left blank, mantra will bake all UDIM tiles the UV object occupies."]}], "indent": 0, "text": ["Custom UDIM Range"], "role": "item", "attrs": {"ifdprop": "renderer:bake_udimrange", "hprop": "vm_bake_udimrange"}, "extent": [210575, 210596], "type": "parameters_item", "id": "vm_bake_udimrange"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Baking"], "extent": [8238, 8251], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [177810, 177875], "text": ["Selects the method used to unwrap from the 'UV Object'."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [177894, 177969], "text": ["Maps the UVs to their locations on the surface of the object."]}], "indent": 4, "type": "dt", "extent": [177875, 177894], "text": ["UV To Surface"]}, {"body": [{"indent": 8, "type": "para", "extent": [177996, 178071], "text": ["Uses raytracing to find the surface closest to the ", {"text": ["UV Object"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [177969, 177996], "text": ["Trace Closest Surface"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Unwrap Method"], "role": "item", "attrs": {"hprop": "vm_uv_unwrap_method"}, "extent": [177759, 177777], "type": "parameters_item", "id": "vm_uv_unwrap_method"}, {"body": [{"indent": 4, "type": "para", "extent": [182664, 182981], "text": ["Determines how much to offset the position of the ray from the surface of the object along the normal vector. This value should be increased proportional to the displacement in a displacement shader (if there is one) in order to ensure that the ray hits the surface. The\n    bias is used solely for camera rays."]}], "indent": 0, "text": ["Ray Bias"], "role": "item", "attrs": {"hprop": "vm_uv_ray_bias"}, "extent": [182624, 182636], "type": "parameters_item", "id": "vm_uv_ray_bias"}, {"body": [{"indent": 4, "type": "para", "extent": [183032, 183258], "text": ["If ", {"text": ["vm_uv_unwrap_method"], "type": "code"}, " is set to ", {"text": ["Trace Closest Surface"], "type": "code"}, " this parameter controls the maximum distance to trace for nearby surfaces. Useful for limiting the areas of the scene that will be baked onto the low-res object."]}], "indent": 0, "text": ["Ray Max Distance"], "role": "item", "attrs": {"hprop": "vm_uv_ray_maxdist"}, "extent": [182981, 183001], "type": "parameters_item", "id": "vm_uv_ray_maxdist"}, {"body": [{"indent": 4, "type": "para", "extent": [182421, 182624], "text": ["When texture baking, this will reverse normals on the geometry.  This\n    determines the orientation of the surface for the baking lens shader (i.e.\n    shade the inside or outside of the surface)."]}], "indent": 0, "text": ["Reverse Normals"], "role": "item", "attrs": {"hprop": "vm_uv_flip_normal"}, "extent": [182371, 182390], "type": "parameters_item", "id": "vm_uv_flip_normal"}, {"body": [{"indent": 4, "type": "para", "extent": [181769, 182016], "text": ["When baking to a UDIM image, this option determines what type of post-processing is applied to the final image.  The choices are  ", {"text": ["No Post Processing"], "type": "ui"}, ", ", {"text": ["Border Expansion"], "type": "ui"}, ", ", {"text": ["Fill Background With Average Color"], "type": "ui"}, ", and ", {"text": ["Diffuse Fill"], "type": "ui"}, "."]}, {"body": [{"body": [{"indent": 12, "type": "para", "extent": [182026, 182115], "text": ["Currently, this is only supported when rendering to disk (not to flipbooks)"]}], "indent": 4, "role": "item", "extent": [182016, 182026], "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["UDIM Post Process"], "role": "item", "attrs": {"ifdprop": "renderer:uvpostprocess", "hprop": "vm_uvpostprocess"}, "extent": [181681, 181702], "type": "parameters_item", "id": "vm_uvpostprocess"}, {"body": [{"indent": 4, "type": "para", "extent": [182218, 182371], "text": ["When baking to a UDIM image and performing island border expansion, this\n    parameter indicates by how many pixels each island should be enlarged."]}], "indent": 0, "text": ["UV Additional Pixels at Border"], "role": "item", "attrs": {"ifdprop": "renderer:uvborderpixels", "hprop": "vm_uvborderpixels"}, "extent": [182115, 182149], "type": "parameters_item", "id": "vm_uvborderpixels"}, {"body": [{"indent": 4, "type": "para", "extent": [181426, 181681], "text": ["When baking to a Ptex image, this option determines the orientation of face ids for subfaces when splitting non-quad faces.  The default is to order the sub-faces counterclockwise.  However, some software expects to have the faces ordered clockwise."]}], "indent": 0, "text": ["Orient Ptex Subfaces Clockwise"], "role": "item", "attrs": {"ifdprop": "renderer:ptexwraporient", "hprop": "vm_ptexwraporient"}, "extent": [181323, 181357], "type": "parameters_item", "id": "vm_ptexwraporient"}, {"body": [{"indent": 4, "type": "para", "extent": [179379, 179637], "text": ["This parameter controls the light components excluded during bake renders. When baking it is common to render only view-independent components such as \"diffuse\". The default value of ", {"text": ["-diffuse & -volume"], "type": "code"}, " will only render diffuse and volume light paths."]}], "indent": 0, "text": ["Exclude Light Paths"], "role": "item", "attrs": {"hprop": "vm_uvlightpaths"}, "extent": [179327, 179350], "type": "parameters_item", "id": "vm_uvlightpaths"}, {"body": [{"indent": 4, "type": "para", "extent": [180665, 180893], "text": ["When baking to a Ptex image, mantra will look for primitive-level scalar attribute of this name to scale tile resolution of current face. Note that the scaled resolution is still clamped by Minimum and Maximum resolutions."]}], "indent": 0, "text": ["Ptex Scale Prim Attribute"], "role": "item", "attrs": {"ifdprop": "renderer:ptexscaleattr", "hprop": "vm_ptexscaleattr"}, "extent": [180569, 180598], "type": "parameters_item", "id": "vm_ptexscaleattr"}, {"body": [{"indent": 4, "type": "para", "extent": [180995, 181323], "text": ["If this is disabled, mantra will no longer measure relative size of faces compared with smallest faces in the model when baking to a Ptex image. The tile resolution of each face will simply be ", {"text": ["Minimum Ptex Map Resolution"], "type": "ui"}, " multiplied by ", {"text": ["Ptex Resolution Scale"], "type": "ui"}, " and primitive-level Ptex scale attribute (if one exists)."]}], "indent": 0, "text": ["Ptex Use Relative Scale"], "role": "item", "attrs": {"ifdprop": "renderer:ptexrelativescale", "hprop": "vm_ptexrelativescale"}, "extent": [180893, 180920], "type": "parameters_item", "id": "vm_ptexrelativescale"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Unwrapping"], "extent": [8863, 8880], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [124922, 125303], "text": ["Controls the number of primary rays Mantra will use to sample your scene per pixel. The two numbers represent an arrangement of samples in the X and Y axis and are generally the same number. However, for non-square pixels it may be necessary to use different values in X and Y. Multiplying these two values together will give you the number of primary rays per pixel."]}], "indent": 4, "text": [{"text": "", "fullpath": "/images/render/mug/sampling_tab/PixelSampling.jpg", "scheme": "Image", "type": "link", "value": "/images/render/mug/sampling_tab/PixelSampling.jpg"}], "role": "item", "extent": [124854, 124922], "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 4, "type": "para", "extent": [125303, 125601], "text": ["Increasing Pixel Samples will result in a cleaner, higher quality image. However, since all other sampling values are multiplied by the number of Pixel Samples, they should only be increased when necessary. For more details on when to increase Pixel Samples, see the \u201cRemoving Noise\u201d section."]}], "indent": 0, "text": ["Pixel samples"], "role": "item", "attrs": {"ifdprop": "image:samples", "hprop": "vm_samples"}, "extent": [124785, 124802], "type": "parameters_item", "id": "vm_samples"}, {"body": [{"indent": 4, "type": "para", "extent": [125696, 125862], "text": ["When enabled, this parameter will cause Mantra to use ray variance antialiasing when determining the number of Secondary Rays to send for every Primary Ray."]}, {"indent": 4, "type": "para", "extent": [125862, 126263], "text": ["This means that rather than using a specific number of rays, Mantra will first send out a small number of rays and use this sample set to evaluate the Variance. Depending on the amount of various, Mantra will continue to send more rays up to the ", {"text": ["Max Ray Samples"], "type": "ui"}, " value. Ray Variance Antialiasing is useful for optimizing your render by sending more rays only in the areas they are needed."]}, {"indent": 4, "type": "para", "extent": [126263, 126449], "text": ["In cases where the minimum number of rays to remove noise is equal to the maximum number of rays, you may save a small amount of render time by disabling Ray Variance Antialiasing."]}], "indent": 0, "text": ["Ray variance anti-aliasing"], "role": "item", "attrs": {"ifdprop": "object:dorayvariance", "hprop": "vm_dorayvariance"}, "extent": [125601, 125631], "type": "parameters_item", "id": "vm_dorayvariance"}, {"body": [{"indent": 4, "type": "para", "extent": [127599, 127857], "text": ["This value is the ", {"text": ["minimum number of secondary rays"], "type": "strong"}, " to use for each BSDF type when generating an image. When ", {"text": ["Ray Variance anti-aliasing"], "type": "ui"}, " is disabled, this number represents the number of secondary rays to send regardless of the ", {"text": ["Noise Level"], "type": "ui"}, "."]}, {"indent": 4, "type": "para", "extent": [127857, 128001], "text": ["Remember, this number is multiplied by the current number of Pixel Samples ", {"text": ["and"], "type": "em"}, " the number of BSDF types on the material being evaluated."]}], "indent": 0, "text": ["Min Ray Samples"], "role": "item", "attrs": {"ifdprop": "object:minraysamples", "hprop": "vm_minraysamples"}, "extent": [127515, 127534], "type": "parameters_item", "id": "vm_minraysamples"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [143172, 143440], "text": ["How finely or coarsely a volume is sampled as a ray travels through it. Volumetric objects are made up of 3d structures called Voxels, the value of this parameter represents the number of voxels a ray will travel through before performing another sample."]}], "indent": 4, "text": [{"text": "", "fullpath": "/images/render/mug/sampling_tab/VolumeQuality.jpg", "scheme": "Image", "type": "link", "value": "/images/render/mug/sampling_tab/VolumeQuality.jpg"}], "role": "item", "extent": [143105, 143172], "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 4, "type": "para", "extent": [143440, 143824], "text": ["The default value is ", {"text": ["0.25"], "type": "code"}, ", which means that every one of every four voxels will be sampled. A value of ", {"text": ["1"], "type": "code"}, " would mean that all voxels are sampled and a value of 2 would mean that all voxels are sampled twice. This means that the volume step rate value behaves in a similar way to pixel samples, acting as a multiplier on the total number of samples for volumetric objects."]}, {"indent": 4, "type": "para", "extent": [143824, 144097], "text": ["For volumes that aren\u2019t voxel based, like CVEX procedural volumes, Mantra will divide the bounding box of the volume into roughly 100 \u201cvirtual\u201d voxels. In these cases, setting the Volume Step Rate correctly is essential to maintaining the correct level of detail."]}, {"indent": 4, "type": "para", "extent": [144097, 144383], "text": ["Keep in mind that increasing the volume step rate can dramatically increase render times, so it should only be adjusted when necessary. Also, while increasing the default from ", {"text": ["0.25"], "type": "code"}, " can reduce volumetric noise, increasing the value beyond ", {"text": ["1"], "type": "code"}, " will rarely see similar results."]}, {"indent": 4, "type": "para", "extent": [144383, 144475], "text": ["For more information about volume sampling, see ", {"text": ["sampling and noise"], "fullpath": "/render/sampling", "scheme": null, "type": "link", "value": "/render/sampling"}, "."]}], "indent": 0, "text": ["Volume step rate"], "role": "item", "attrs": {"ifdprop": "object:volumesteprate", "hprop": "vm_volumesteprate"}, "extent": [143018, 143038], "type": "parameters_item", "id": "vm_volumesteprate"}, {"body": [{"indent": 4, "type": "para", "extent": [148654, 148953], "text": ["A factor to proportionally decrease the volume step rate only for shadows, relative to the volume step rate. Smaller values will cause mantra to use a larger ray march step size for shadow rays than other shading rays.  A value of 1 will produce equal quality for shadow rays and shading rays."]}], "indent": 0, "text": ["Volume shadow step rate"], "role": "item", "attrs": {"ifdprop": "object:volumeshadowsteprate", "hprop": "vm_volumeshadowsteprate"}, "extent": [148548, 148575], "type": "parameters_item", "id": "vm_volumeshadowsteprate"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [150356, 150720], "text": ["The number of transparent samples to be shaded as a ray travels through translucent objects. Increasing this value will result in less noise in translucent objects and is generally less costly than increasing Pixel samples, Volume Step Rate, or Min and Max ray samples. Stochastic Sampling will not have any effect on noise from Indirect Sources however."]}], "indent": 4, "text": [{"text": "", "fullpath": "/images/render/mug/sampling/VolumeSamplingStochastic.jpg", "scheme": "Image", "type": "link", "value": "/images/render/mug/sampling/VolumeSamplingStochastic.jpg"}], "role": "item", "extent": [150282, 150356], "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 4, "type": "para", "extent": [150720, 150919], "text": ["This may make the image noisier than without stochastic transparency, so you may need to compensate by, for example, increasing the pixel samples. You should generally leave this option on."]}, {"indent": 4, "type": "para", "extent": [150919, 151180], "text": ["The renderer ignores this option for micropolygon rendering (except for secondary ray tracing) and for renders that only generate opacity (such as deep shadow maps). In those cases it is more efficient to composite all the transparent shading results."]}, {"indent": 4, "type": "para", "extent": [151180, 151206], "text": ["Added in Houdini 12."]}], "indent": 0, "text": ["Stochastic transparency"], "role": "item", "attrs": {"ifdprop": "image:transparent", "hprop": "vm_transparent"}, "extent": [150195, 150222], "type": "parameters_item", "id": "vm_transparent"}, {"body": [{"indent": 4, "type": "para", "extent": [151302, 151506], "text": ["The number of transparent samples to shade when ", {"fragment": "#vm_transparent", "text": ["Stochastic Transparency"], "value": "#vm_transparent", "fullpath": "/props/mantra#vm_transparent", "scheme": null, "type": "link"}, " is on. Higher values improve shading quality for volumes and transparent surfaces, but are slower to render."]}], "indent": 0, "text": ["Stochastic samples"], "role": "item", "attrs": {"ifdprop": "image:transparentsamples", "hprop": "vm_transparentsamples"}, "extent": [151206, 151228], "type": "parameters_item", "id": "vm_transparentsamples"}, {"body": [{"indent": 4, "type": "para", "extent": [140124, 140494], "text": ["Sampling generally occurs in random patterns which change on every frame of an animation. This can cause a distracting \u201cbuzz\u201d when there is a significant amount of noise in your images which can make evaluation of other aspects of the scene difficult. Enabling this parameter will \u201clock\u201d the sampling patterns so that the noise remains the same on every frame."]}, {"indent": 4, "type": "para", "extent": [140494, 140740], "text": ["Also, in some cases where the final rendered images will be sent through a post-render de- noise process, it can be useful to have the noise remain constant frame to frame. Consistent sampling patterns can help when analyzing the noise."]}, {"indent": 4, "type": "para", "extent": [140740, 140858], "text": ["It defaults to \u201coff\u201d because it is generally unacceptable to have a locked sampling pattern for final sequences."]}], "indent": 0, "text": ["Sample lock"], "role": "item", "attrs": {"ifdprop": "image:samplelock", "hprop": "vm_samplelock"}, "extent": [140051, 140066], "type": "parameters_item", "id": "vm_samplelock"}, {"body": [{"indent": 4, "type": "para", "extent": [139822, 140051], "text": ["Adjusting this parameter will cause the pixel sampling patterns used by Mantra to be regenerated in different configurations. By default, the patterns change on every frame, so manually changing this value is not necessary."]}], "indent": 0, "text": ["Random seed"], "role": "item", "attrs": {"ifdprop": "renderer:randomseed", "hprop": "vm_randomseed"}, "extent": [139746, 139761], "type": "parameters_item", "id": "vm_randomseed"}, {"body": [{"indent": 4, "type": "para", "extent": [151596, 151873], "text": ["Occasionally, when motion blur is going to be added to an image as a post-process or for other compositing operations, it is necessary to calculate the motion blur but not include it in the final rendered image. In these cases, Allow Image Motion Blur should be disabled."]}, {"indent": 4, "type": "para", "extent": [151873, 152117], "text": ["This means that the blurred positions necessary for Motion Blur can be exported as a custom Motion Vector Image Plane from within a shader using the GetBlurP() function without the small overhead of doing the actual shading in the render."]}, {"indent": 4, "type": "para", "extent": [152117, 152439], "text": ["This parameter is related to the motion blur parameters which are available only when Motion Blur is enabled. Disabling this option will cause motion blur to be removed from the final rendered image, however the blurred Position will still be calculated, allowing for custom motion vector image planes to be created."]}], "indent": 0, "text": ["Allow image motion blur"], "role": "item", "attrs": {"ifdprop": "renderer:imageblur", "hprop": "vm_imageblur"}, "extent": [151506, 151533], "type": "parameters_item", "id": "vm_imageblur"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Sampling"], "extent": [9236, 9254], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Rendering"], "extent": [9220, 9236], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"type": "para", "indent": 0, "extent": [10120, 10209], "text": ["The parameters on this tab determine which objects and lights are included in the IFD."]}, {"type": "para", "indent": 0, "extent": [10209, 10268], "text": ["Mantra processes these parameters in the following order:"]}, {"body": [{"type": "ord", "blevel": 2, "indent": 0, "extent": [10268, 10309], "text": ["Candidate objects/lights are selected."]}, {"type": "ord", "blevel": 2, "indent": 0, "extent": [10309, 10345], "text": ["Forced objects/lights are added. "]}, {"type": "ord", "blevel": 2, "indent": 0, "extent": [10345, 10409], "text": ["Objects/Lights matching the exclusion parameter are removed."]}], "type": "ord_group", "container": true}, {"body": [{"body": [{"type": "para", "indent": 4, "extent": [10428, 10575], "text": ["The geometry objects in this parameter will be included in the IFD if their display flags are turned on and their display channel is enabled."]}], "indent": 0, "text": ["Candidate Objects"], "role": "item", "extent": [10409, 10428], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [10590, 10727], "text": ["Objects in this parameter are added to the IFD regardless of the state of their display. Objects can only be added to the IFD once."]}], "indent": 0, "text": ["Force Objects"], "role": "item", "extent": [10575, 10590], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [10741, 10792], "text": ["Objects forced to be output as matte objects."]}], "indent": 0, "text": ["Forced Matte"], "role": "item", "extent": [10727, 10741], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [10808, 10861], "text": ["Objects forced to be output as phantom objects."]}], "indent": 0, "text": ["Forced Phantom"], "role": "item", "extent": [10792, 10808], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [10878, 11029], "text": ["Objects in this parameter are excluded from the scene, regardless of whether they are selected in the ", {"text": ["Candidate Objects"], "type": "ui"}, " or ", {"text": ["Force Objects"], "type": "ui"}, "."]}], "indent": 0, "text": ["Exclude Objects"], "role": "item", "extent": [10861, 10878], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [11041, 11246], "text": ["Only lights in this parameter will be included in the IFD. This includes shadow map generation and illumination. If this parameter is set, the candidate, forced, and exclusion parameters are ignored."]}, {"type": "para", "indent": 4, "extent": [11246, 11393], "text": ["Using this parameter in conjunction with the ", {"text": ["render_viewcamera"], "type": "code"}, " property provides a quick way of generating shadow maps for selected lights."]}], "indent": 0, "text": ["Solo Light"], "role": "item", "extent": [11029, 11041], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [11411, 11589], "text": ["Each light in this parameter is added to the IFD if the dimmer channel of the light is not 0. The standard light sets the dimmer channel to 0 when the light is not enabled."]}], "indent": 0, "text": ["Candidate Lights"], "role": "item", "extent": [11393, 11411], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [11603, 11708], "text": ["The lights in this parameter are added to the IFD regardless of the value in their dimmer channels."]}], "indent": 0, "text": ["Force Lights"], "role": "item", "extent": [11589, 11603], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [11724, 11844], "text": ["These lights will be excluded from the scene, even if they are selected in ", {"text": ["Candidate Lights"], "type": "ui"}, " or Force Lights__."]}], "indent": 0, "text": ["Exclude Lights"], "role": "item", "extent": [11708, 11724], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [11864, 11977], "text": ["If there are no lights in the scene, a headlight is created by default. To disable, turn off this checkbox."]}], "indent": 0, "text": ["Headlight Creation"], "role": "item", "extent": [11844, 11864], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [11990, 12140], "text": ["The fog/atmosphere objects in this parameter are included in the IFD if their display flags are turned on and their display channel is enabled."]}], "indent": 0, "text": ["Visible Fog"], "role": "item", "extent": [11977, 11990], "type": "parameters_item"}], "role": "item_group", "container": true, "type": "parameters_item_group"}], "container": true, "level": 3, "text": ["Objects"], "extent": [10092, 10120], "indent": 0, "type": "h", "id": "objects_tab"}, {"body": [{"indent": 0, "type": "para", "extent": [12168, 12457], "text": ["Each script command refers to an hscript command which will be run, regardless of the expression language selected for the parameter. The resulting string will be run as an hscript command. It is possible to use the python, unix or source hscript commands to perform complex processing."]}, {"indent": 0, "type": "para", "extent": [12457, 12625], "text": ["The commands are always run when rendering occurs. The command checks the parameters of the output driver when it is rendering a range or sending output to a command."]}, {"indent": 0, "type": "para", "extent": [12625, 12744], "text": ["Before the render occurs, Houdini will automatically set the current hscript directory to point to the output driver."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [12763, 12851], "text": ["This command is run before any IFDs are generated. It is only run once per render."]}], "indent": 0, "text": ["Pre-Render Script"], "role": "item", "extent": [12744, 12763], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [12869, 12924], "text": ["This command is run before each IFD is generated."]}], "indent": 0, "text": ["Pre-Frame Script"], "role": "item", "extent": [12851, 12869], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [12943, 13141], "text": ["This command is run after each IFD is generated. Although the IFD may have been generated, this does not necessarily mean that mantra has finished rendering the image when this command is run."]}], "indent": 0, "text": ["Post-Frame Script"], "role": "item", "extent": [12924, 12943], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [13162, 13378], "text": ["This command is run one time, after all IFDs have been generated. Although the IFD may have been generated, this does not necessarily mean that mantra has finished rendering the image when this command is run."]}], "indent": 0, "text": ["Post-Render Script"], "role": "item", "extent": [13141, 13162], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "container": true, "level": 3, "text": ["Scripts"], "extent": [12140, 12168], "indent": 0, "type": "h", "id": "scripts_tab"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [13414, 13533], "text": ["The command (i.e. mantra) where the IFD file is sent. This will be disabled if the IFD file is saved to disk."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [13543, 13798], "text": ["The Mantra ROP will not automatically gzip based on the file extension of the ", {"text": [".ifd"], "type": "code"}, " file. The file ", {"text": [".ifd.gz"], "type": "code"}, " will contain uncompressed data. However, you can set your render command to something like ", {"text": ["gzip > foo$F4.ifd.gz"], "type": "code"}, " to compress the file."]}], "indent": 4, "role": "item", "extent": [13533, 13543], "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Command"], "role": "item", "extent": [13404, 13414], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [13809, 13930], "text": ["The location where the IFD file is saved to disk. You must turn on the Disk File checkbox to enable this parameter."]}], "indent": 0, "text": ["Disk File"], "role": "item", "extent": [13798, 13809], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [13959, 14240], "text": ["When sending the output to a command, Houdini will normally return control after it is finished writing the IFD. This allows the render process to complete in the background. Turning on this parameter will force Houdini to block until the mantra finishes rendering the frame."]}, {"indent": 4, "type": "para", "extent": [14240, 14518], "text": ["When rendering a frame range, this option is automatically turned on. However, the option is not automatically turned on when rendering in an hscript or python loop construct. Therefore caution must be used or it is possible to end up starting multiple background renders."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [14528, 14626], "text": ["The rps and rkill hscript commands can be used to query or kill background renders. "]}, {"indent": 8, "type": "para", "extent": [14626, 14711], "text": ["See the ", {"fragment": "#trouble", "text": ["Troubleshooting"], "value": "#trouble", "fullpath": "/nodes/out/ifd#trouble", "scheme": null, "type": "link"}, " section for more information."]}], "indent": 4, "role": "item", "extent": [14518, 14528], "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Block Until Render Complete"], "role": "item", "extent": [13930, 13959], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [14738, 14834], "text": ["If this option is turned on, POP and DOP simulations will be initialized before rendering."]}], "indent": 0, "text": ["Initialize Simulation OPs"], "role": "item", "extent": [14711, 14738], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [14852, 15003], "text": ["Enabling this checkbox will cause the driver to show up in the viewport menu. By default, SOHO output drivers to not appear in the viewport menu."]}], "indent": 0, "text": ["Show In Viewport"], "role": "item", "extent": [14834, 14852], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [20599, 20754], "text": ["Saves binary geometry in the IFD. If this option is turned off, ASCII geometry is saved in the IFD. Binary is much more efficient. ASCII is readable."]}], "indent": 0, "text": ["Save Binary Geometry"], "role": "item", "attrs": {"hprop": "vm_binarygeometry"}, "extent": [20543, 20568], "type": "parameters_item", "id": "vm_binarygeometry"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "container": true, "level": 3, "text": ["Driver"], "extent": [13378, 13404], "indent": 0, "type": "h", "id": "driver_tab"}], "indent": 0, "level": 2, "text": ["Advanced"], "extent": [9582, 9597], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [4677, 4689], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [9708, 9733], "text": [{"text": ["Mantra"], "fullpath": "/nodes/out/ifd", "scheme": "Node", "type": "link", "value": "/nodes/out/ifd"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [9699, 9708], "container": true, "type": "related_section", "id": "related"}], "title": ["Bake Texture"], "summary": ["Generates a texture map from one or more objects' rendered appearance."], "attrs": {"version": null, "namespace": null, "internal": "baketexture", "context": "out", "type": "node", "icon": "ROP/mantra"}, "included": ["/nodes/out/ifd", "/nodes/out/standard", "/props/_minmax_styles", "/props/mantra"], "type": "root"}